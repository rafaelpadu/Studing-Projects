{"version":3,"sources":["../../app-es6/services/ConnectionFactories.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;AAChC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,QAAQ,IAAZ;AACA;AACI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAHL;AAAA;AAAA,4CAK0B;AAClB,uBAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAASC,MAAT,EAAoB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;AAGAR,gCAAYS,SAAZ,GAAwB,aAAI;AACxB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;AAUAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBApBM,CAAP;AAqBH;AA3BL;AAAA;AAAA,0CA4ByBrB,UA5BzB,EA4BqC;AAC7BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AAChDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAc,IAAhB,EAApC;AACH,iBAHD;AAKH;AAlCL;AAAA;AAAA,8CAmC4B;AACpB,oBAAI5B,UAAJ,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AACJ;AAxCL;;AAAA;AAAA;AA2CH,CAnDuB,EAAxB","file":"ConnectionFactories.js","sourcesContent":["var ConnectionFactory = (function (){\r\n    const stores = ['negociacoes']\r\n    const version = 3;\r\n    const dbName = 'aluraframe'\r\n    \r\n    var connection = null;\r\n    \r\n    var close = null;\r\n    return class ConnectionFactory {\r\n        constructor(){\r\n            throw new Error('Não é possivel criar instancias de ConnectionFactory');\r\n        }\r\n    \r\n        static getConnection(){\r\n            return new Promise ((resolve,reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n    \r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                }\r\n                openRequest.onsuccess = e =>{\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você não pode fechar a conexão diretamente.')\r\n                        }\r\n                    }\r\n                    resolve(connection);\r\n                }\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error)\r\n                    reject(e.target.error.name)\r\n                }\r\n            })\r\n        }\r\n        static _createStores(connection) {\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n                connection.createObjectStore(store, { autoIncrement:true });\r\n            })\r\n            \r\n        }\r\n        static closeConnection(){\r\n            if (connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    \r\n    }\r\n})();"]}