{"version":3,"sources":["../../app-es6/services/NegociacoesServices.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","console","log","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","erro","all","obterNegociacaoSemana","obterNegociacaoSemanaAnterior","obterNegociacaoSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente","error"],"mappings":"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","file":"NegociacoesServices.js","sourcesContent":["class NegociacaoService{\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n    obterNegociacaoSemana(){\r\n        return new Promise((resolve,reject) =>{\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes =>{\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto=> new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possivel obter as negociações da semana');\r\n                })\r\n        });\r\n    }\r\n    obterNegociacaoSemanaAnterior(){\r\n        return new Promise((resolve,reject) =>{\r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes =>{\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto=> new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                })\r\n                .catch(erro => {\r\n                        console.log(erro);\r\n                        reject('Não foi possivel obter as negociações da semana anterior.');\r\n                })\r\n            });\r\n        }\r\n    obterNegociacaoSemanaRetrasada(){\r\n        return new Promise((resolve,reject) =>{\r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes =>{\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto=> new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possivel obter as negociações da semana retrasada');\r\n                })\r\n        });\r\n    }\r\n    obterNegociacoes() {\r\n        \r\n        return Promise.all([\r\n            this.obterNegociacaoSemana(),\r\n            this.obterNegociacaoSemanaAnterior(),\r\n            this.obterNegociacaoSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\r\n\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n    cadastra(negociacao){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adiciona com sucesso!')\r\n            .catch(() => {\r\n                throw new Error('Não foi possivel adiciona a negociação')\r\n                });   \r\n    }\r\n    lista(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possivel obter as negociações')})\r\n    }\r\n    apaga(){\r\n        return ConnectionFactory  \r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagados com sucesso!')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel apagar as negociações')\r\n            })\r\n    }\r\n    importa(listaAtual){\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao => \r\n                    !listaAtual.some(negociacaoExistente => \r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possivel importar as negociações');\r\n            })\r\n\r\n    }\r\n}"]}